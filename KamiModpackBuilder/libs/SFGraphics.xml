<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SFGraphics</name>
    </assembly>
    <members>
        <member name="T:SFGraphics.Cameras.Camera">
            <summary>
            A container for 4x4 matrices. The matrices can not be set directly.
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.DefaultPosition">
            <summary>
            The camera's initial position or position after <see cref="M:SFGraphics.Cameras.Camera.ResetToDefaultPosition"/>.
            Defaults to (0, 10, -80).
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.Position">
            <summary>
            The position of the camera in scene units. 
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.Scale">
            <summary>
            The scale for all objects. Defaults to 1.
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.FovRadians">
            <summary>
            The vertical field of view in radians. 
            Updates <see cref="P:SFGraphics.Cameras.Camera.FovDegrees"/> and all matrices when set.
            <para>Values less than or equal to 0 or greater than or equal to PI are ignored.</para>
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.FovDegrees">
            <summary>
            The vertical field of view in degrees. 
            Updates <see cref="P:SFGraphics.Cameras.Camera.FovRadians"/> and all matrices when set.
            <para>Values less than or equal to 0 or greater than or equal to 180 are ignored.</para>
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.RotationXRadians">
            <summary>
            The rotation around the x-axis in radians.
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.RotationXDegrees">
            <summary>
            The rotation around the x-axis in degrees.
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.RotationYRadians">
            <summary>
            The rotation around the y-axis in radians.
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.RotationYDegrees">
            <summary>
            The rotation around the y-axis in degrees.
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.FarClipPlane">
            <summary>
            The far clip plane of the perspective matrix.
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.NearClipPlane">
            <summary>
            The near clip plane of the perspective matrix.
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.RenderWidth">
            <summary>
            The width of the viewport or rendered region in pixels.
            Values less than 1 are set to 1.
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.RenderHeight">
            <summary>
            The height of the viewport or rendered region in pixels.
            Values less than 1 are set to 1.
            </summary>
        </member>
        <member name="F:SFGraphics.Cameras.Camera.modelViewMatrix">
            <summary>
            See <see cref="P:SFGraphics.Cameras.Camera.ModelViewMatrix"/>
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.ModelViewMatrix">
            <summary>
            The result of <see cref="P:SFGraphics.Cameras.Camera.RotationMatrix"/> * <see cref="P:SFGraphics.Cameras.Camera.TranslationMatrix"/>
            </summary>
        </member>
        <member name="F:SFGraphics.Cameras.Camera.mvpMatrix">
            <summary>
            See <see cref="P:SFGraphics.Cameras.Camera.MvpMatrix"/>
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.MvpMatrix">
            <summary>
            The result of <see cref="P:SFGraphics.Cameras.Camera.ModelViewMatrix"/> * <see cref="P:SFGraphics.Cameras.Camera.PerspectiveMatrix"/>
            </summary>
        </member>
        <member name="F:SFGraphics.Cameras.Camera.rotationMatrix">
            <summary>
            See <see cref="P:SFGraphics.Cameras.Camera.RotationMatrix"/>
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.RotationMatrix">
            <summary>
            The result of <see cref="M:OpenTK.Matrix4.CreateRotationY(System.Single)"/> * <see cref="M:OpenTK.Matrix4.CreateRotationX(System.Single)"/>
            </summary>
        </member>
        <member name="F:SFGraphics.Cameras.Camera.translationMatrix">
            <summary>
            See <see cref="P:SFGraphics.Cameras.Camera.TranslationMatrix"/>
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.TranslationMatrix">
            <summary>
            The result of <see cref="M:OpenTK.Matrix4.CreateTranslation(System.Single,System.Single,System.Single)"/> for X, -Y, Z of <see cref="P:SFGraphics.Cameras.Camera.Position"/>
            </summary>
        </member>
        <member name="F:SFGraphics.Cameras.Camera.perspectiveMatrix">
            <summary>
            See <see cref="P:SFGraphics.Cameras.Camera.PerspectiveMatrix"/>
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.PerspectiveMatrix">
            <summary>
            The result of <see cref="M:OpenTK.Matrix4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)"/> for 
            <see cref="P:SFGraphics.Cameras.Camera.FovRadians"/>, <see cref="P:SFGraphics.Cameras.Camera.RenderWidth"/> / <see cref="P:SFGraphics.Cameras.Camera.RenderHeight"/>, <see cref="P:SFGraphics.Cameras.Camera.NearClipPlane"/>,
            <see cref="P:SFGraphics.Cameras.Camera.FarClipPlane"/>
            </summary>
        </member>
        <member name="M:SFGraphics.Cameras.Camera.#ctor">
            <summary>
            Creates a new <see cref="T:SFGraphics.Cameras.Camera"/> located at <see cref="P:SFGraphics.Cameras.Camera.DefaultPosition"/>.
            </summary>
        </member>
        <member name="M:SFGraphics.Cameras.Camera.Pan(System.Single,System.Single,System.Boolean)">
            <summary>
            Translates the camera along the x and y axes by a specified amount.
            </summary>
            <param name="xAmount">The amount to add to the camera's x coordinate</param>
            <param name="yAmount">The amount to add to the camera's y coordinate</param>
            <param name="scaleByDistanceToOrigin">When <c>true</c>, the <paramref name="xAmount"/>
            and <paramref name="yAmount"/> are multiplied by the magnitude of <see cref="P:SFGraphics.Cameras.Camera.Position"/>
            and the sine of <see cref="P:SFGraphics.Cameras.Camera.FovRadians"/></param>
        </member>
        <member name="M:SFGraphics.Cameras.Camera.Zoom(System.Single,System.Boolean)">
            <summary>
            Translates the camera along the z-axis by a specified amount.
            </summary>
            <param name="amount"></param>
            <param name="scaleByDistanceToOrigin">When <c>true</c>, the <paramref name="amount"/> 
            is multiplied by the magnitude of <see cref="P:SFGraphics.Cameras.Camera.Position"/></param>
        </member>
        <member name="M:SFGraphics.Cameras.Camera.UpdateMatrices">
            <summary>
            Updates all matrix properties using the respective update methods.
            </summary>
        </member>
        <member name="M:SFGraphics.Cameras.Camera.UpdateTranslationMatrix">
            <summary>
            Calculates <see cref="F:SFGraphics.Cameras.Camera.translationMatrix"/>.
            </summary>
        </member>
        <member name="M:SFGraphics.Cameras.Camera.UpdateRotationMatrix">
            <summary>
            Calculates <see cref="F:SFGraphics.Cameras.Camera.rotationMatrix"/>.
            </summary>
        </member>
        <member name="M:SFGraphics.Cameras.Camera.UpdatePerspectiveMatrix">
            <summary>
            Calculates <see cref="F:SFGraphics.Cameras.Camera.perspectiveMatrix"/>.
            </summary>
        </member>
        <member name="M:SFGraphics.Cameras.Camera.UpdateModelViewMatrix">
            <summary>
            Calculates <see cref="F:SFGraphics.Cameras.Camera.modelViewMatrix"/>.
            </summary>
        </member>
        <member name="M:SFGraphics.Cameras.Camera.UpdateMvpMatrix">
            <summary>
            Calculates <see cref="F:SFGraphics.Cameras.Camera.mvpMatrix"/>.
            </summary>
        </member>
        <member name="M:SFGraphics.Cameras.Camera.ResetToDefaultPosition">
            <summary>
            Sets <see cref="F:SFGraphics.Cameras.Camera.rotationXRadians"/> and <see cref="P:SFGraphics.Cameras.Camera.RotationYRadians"/> to 0.
            </summary>
        </member>
        <member name="M:SFGraphics.Cameras.Camera.FrameBoundingSphere(OpenTK.Vector3,System.Single,System.Single)">
            <summary>
            Transforms the camera to frame a sphere of the given dimensions in the viewport.
            </summary>
            <param name="center">The position of the center of the bounding sphere.</param>
            <param name="radius">The radius of the bounding sphere in scene units</param>
            <param name="offset">The offset in scene units</param>
        </member>
        <member name="T:SFGraphics.GLObjects.BufferObjects.BufferObject">
            <summary>
            Data can be read from and written to the buffer using any value type.
            <para></para><para></para>
            This class does not permanently store the data used for initialization. 
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.BufferObjects.BufferObject.Target">
            <summary>
            The target to which <see cref="F:SFGraphics.GLObjects.GLObject.Id"/> is bound when calling Bind().
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.BufferObjects.BufferObject.#ctor(OpenTK.Graphics.OpenGL.BufferTarget)">
            <summary>
            Creates a buffer of the specified target with uninitialized data.
            </summary>
            <param name="target">The target to which <see cref="F:SFGraphics.GLObjects.GLObject.Id"/> is bound</param>
        </member>
        <member name="M:SFGraphics.GLObjects.BufferObjects.BufferObject.Bind">
            <summary>
            Binds <see cref="F:SFGraphics.GLObjects.GLObject.Id"/> to the buffer target specified at creation.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.BufferObjects.BufferObject.Bind(OpenTK.Graphics.OpenGL.BufferTarget)">
            <summary>
            Binds <see cref="F:SFGraphics.GLObjects.GLObject.Id"/> to <paramref name="target"/>.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:SFGraphics.GLObjects.BufferObjects.BufferObject.BindBase(OpenTK.Graphics.OpenGL.BufferRangeTarget,System.Int32)">
            <summary>
            Binds <see cref="F:SFGraphics.GLObjects.GLObject.Id"/> to an indexed buffer target.
            </summary>
            <param name="target">The target for the bind</param>
            <param name="index">The index of the binding point</param>
        </member>
        <member name="M:SFGraphics.GLObjects.BufferObjects.BufferObject.SetData``1(``0[],OpenTK.Graphics.OpenGL.BufferUsageHint)">
            <summary>
            Initializes the buffer's data with the specified array.
            <paramref name="data"/> should be contiguous in memory, so only 
            </summary>
            <typeparam name="T">The type of each item. This includes arithmetic types like <see cref="T:System.Int32"/>.</typeparam>
            <param name="data">The data used to initialize the buffer's data</param>
            <param name="usageHint">A hint on how the data will be used, which allows performance optimizations</param>
        </member>
        <member name="M:SFGraphics.GLObjects.BufferObjects.BufferObject.SetSubData``1(``0[],System.Int32)">
            <summary>
            Initializes a portion of the buffer's data with the specified array.
            <paramref name="data"/> should be contiguous in memory, so only 
            non nullable structs containing value types as members will work properly.
            </summary>
            <typeparam name="T">The type of each item. This includes arithmetic types like <see cref="T:System.Int32"/>.</typeparam>
            <param name="data">The data used to initialize the buffer's data.</param>
            <param name="offsetInBytes">The offset where data replacement will begin</param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">The specified range includes data 
            outside the buffer's current capacity.</exception>        
        </member>
        <member name="M:SFGraphics.GLObjects.BufferObjects.BufferObject.GetData``1">
            <summary>
            Reads the buffer's data into structs of type <typeparamref name="T"/>.
            <para></para><para></para>
            The data returned may not be valid if the buffer's data is modified using <see cref="M:SFGraphics.GLObjects.BufferObjects.BufferObject.MapBuffer(OpenTK.Graphics.OpenGL.BufferAccess)"/>.
            </summary>
            <typeparam name="T">The type specified for each item when initializing the buffer's data.</typeparam>
            <returns>An array of all the buffer's initialized data</returns>
        </member>
        <member name="M:SFGraphics.GLObjects.BufferObjects.BufferObject.GetSubData``1(System.Int32,System.Int32)">
            <summary>
            Binds the buffer and reads <paramref name="itemCount"/> elements of type <typeparamref name="T"/> 
            starting at <paramref name="offsetInBytes"/>.
            </summary>
            <typeparam name="T">The type of each item. This includes arithmetic types like <see cref="T:System.Int32"/>.</typeparam>
            <param name="offsetInBytes">The starting offset for reading</param>
            <param name="itemCount">The number of items of type <typeparamref name="T"/> to read.</param>
            <returns>An array of size <paramref name="itemCount"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified range includes data 
            outside the buffer's current capacity.</exception>
        </member>
        <member name="M:SFGraphics.GLObjects.BufferObjects.BufferObject.MapBuffer(OpenTK.Graphics.OpenGL.BufferAccess)">
            <summary>
            Maps and gets a pointer to the buffer's data store.
            Using the pointer in a manner inconsistent with <paramref name="access"/>
            will result in system errors.
            </summary>
            <param name="access">Specifies read and/or write access for the mapped data</param>
            <returns>An IntPtr for the buffer's data</returns>
        </member>
        <member name="M:SFGraphics.GLObjects.BufferObjects.BufferObject.Unmap">
            <summary>
            Releases the mapping of the buffer's data store.
            If false, the buffer's data was corrupted while mapped
            and should be reinitialized.
            </summary>
            <returns><c>true</c> if the data was not corrupted while mapped</returns>
        </member>
        <member name="T:SFGraphics.GLObjects.Framebuffers.Framebuffer">
            <summary>
            Encapsulates an OpenGL framebuffer, including any attached color or depth attachments.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Framebuffers.Framebuffer.Target">
            <summary>
            The target which <see cref="F:SFGraphics.GLObjects.GLObject.Id"/> is bound when calling <see cref="M:SFGraphics.GLObjects.Framebuffers.Framebuffer.Bind"/>.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Framebuffers.Framebuffer.PixelInternalFormat">
            <summary>
            The internal format used for all color attachments.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Framebuffers.Framebuffer.Width">
            <summary>
            The width of all attachments in pixels.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Framebuffers.Framebuffer.Height">
            <summary>
            The height of all attachments in pixels.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Framebuffers.Framebuffer.Attachments">
            <summary>
            
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Framebuffers.Framebuffer.#ctor(OpenTK.Graphics.OpenGL.FramebufferTarget)">
            <summary>
            Generates an incomplete framebuffer of the specified target with no attachments.
            The dimensions are invalid until an attachment is added.
            </summary>
            <param name="framebufferTarget">The target to which <see cref="F:SFGraphics.GLObjects.GLObject.Id"/> is bound</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Framebuffers.Framebuffer.#ctor(OpenTK.Graphics.OpenGL.FramebufferTarget,System.Int32,System.Int32,OpenTK.Graphics.OpenGL.PixelInternalFormat,System.Int32)">
            <summary>
            Generates a framebuffer with a color attachment of the specified pixel format and dimensions. 
            A render buffer of the same dimensions as the color attachment is generated for the depth component.
            Binds the framebuffer.
            </summary>
            <param name="target">The target to which <see cref="F:SFGraphics.GLObjects.GLObject.Id"/> is bound</param>
            <param name="width">The width of attached textures or renderbuffers</param>
            <param name="height">The height of attached textures or renderbuffers</param>
            <param name="pixelInternalFormat">The internal format for all color attachments</param>
            <param name="colorAttachmentsCount">The number of color attachments to create. 
            Ex: <c>1</c> would only create ColorAttachment0.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of color attachments is negative.</exception>
        </member>
        <member name="M:SFGraphics.GLObjects.Framebuffers.Framebuffer.GetStatus">
            <summary>
            Gets the framebuffer status, which indicates
            if the framebuffer is complete and valid for rendering.
            </summary>
            <returns>The framebuffer status</returns>
        </member>
        <member name="M:SFGraphics.GLObjects.Framebuffers.Framebuffer.AddAttachment(OpenTK.Graphics.OpenGL.FramebufferAttachment,SFGraphics.GLObjects.Framebuffers.IFramebufferAttachment)">
            <summary>
            Attaches <paramref name="attachment"/> to <paramref name="attachmentPoint"/>.
            Sets <see cref="P:SFGraphics.GLObjects.Framebuffers.Framebuffer.Width"/> and <see cref="P:SFGraphics.GLObjects.Framebuffers.Framebuffer.Height"/> if this is the first attachment.
            </summary>
            <param name="attachmentPoint">The target attachment point</param>
            <param name="attachment">The object to attach</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The attachment dimensions do not match the framebuffer's dimensions.</exception>
        </member>
        <member name="M:SFGraphics.GLObjects.Framebuffers.Framebuffer.Bind">
            <summary>
            Binds the framebuffer to the target specified at creation.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Framebuffers.Framebuffer.SetDrawBuffers(OpenTK.Graphics.OpenGL.DrawBuffersEnum[])">
            <summary>
            Sets which buffers or attachments receive fragment shader outputs.
            Binds the framebuffer.
            </summary>
            <param name="drawBuffers">The buffers used for fragment shader output</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Framebuffers.Framebuffer.SetReadBuffer(OpenTK.Graphics.OpenGL.ReadBufferMode)">
            <summary>
            Sets the color buffer used for GL.ReadPixels and GL.CopyTexImage methods.
            Binds the framebuffer.
            </summary>
            <param name="readBufferMode">The buffer used for read operations</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Framebuffers.Framebuffer.ReadImagePixels(System.Boolean)">
            <summary>
            Reads the framebuffer's contents into a Bitmap.
            </summary>
            <param name="saveAlpha">The alpha channel is preserved when true or set to 255 (white when false</param>
            <returns>A bitmap of the framebuffer's contents</returns>
        </member>
        <member name="M:SFGraphics.GLObjects.Framebuffers.Framebuffer.SamplePixelColor(System.Int32,System.Int32)">
            <summary>
            The origin (0,0) corresponds to the top left of the screen.
            The coordinates are based on the framebuffer's
            <see cref="P:SFGraphics.GLObjects.Framebuffers.Framebuffer.Width"/> and <see cref="P:SFGraphics.GLObjects.Framebuffers.Framebuffer.Height"/>.
            </summary>
            <param name="x">The horizontal pixel coordinate</param>
            <param name="y">The vertical pixel coordinate</param>
            <returns>A color with the RGBA values of the selected pixel</returns>
        </member>
        <member name="T:SFGraphics.GLObjects.Framebuffers.IFramebufferAttachment">
            <summary>
            Contains methods for attaching to a <see cref="T:SFGraphics.GLObjects.Framebuffers.Framebuffer"/>
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Framebuffers.IFramebufferAttachment.Attach(OpenTK.Graphics.OpenGL.FramebufferAttachment,SFGraphics.GLObjects.Framebuffers.Framebuffer)">
            <summary>
            Binds the object to <paramref name="attachment"/> for
            <paramref name="target"/>.
            </summary>
            <param name="attachment">The attachment point</param>
            <param name="target">The target framebuffer for attachment</param>
        </member>
        <member name="P:SFGraphics.GLObjects.Framebuffers.IFramebufferAttachment.Width">
            <summary>
            The width of the attachment in pixels.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Framebuffers.IFramebufferAttachment.Height">
            <summary>
            The height of the attachment in pixels.
            </summary>
        </member>
        <member name="T:SFGraphics.GLObjects.GLObjectManagement.GLObjectManager">
            <summary>
            <see cref="T:SFGraphics.GLObjects.GLObject"/> and all subclasses use reference counting 
            to determine what OpenGL objects can be safely deleted.
            <para></para> <para></para>
            Call <see cref="M:SFGraphics.GLObjects.GLObjectManagement.GLObjectManager.DeleteUnusedGLObjects"/> with a valid OpenGL context current to delete objects with no references.
            <para></para><para></para>
            The reference count may not be decremented until after the context is destroyed.
            Call <see cref="M:System.GC.WaitForPendingFinalizers"/> prior to <see cref="M:SFGraphics.GLObjects.GLObjectManagement.GLObjectManager.DeleteUnusedGLObjects"/> if more 
            immediate cleanup is desired.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.GLObjectManagement.GLObjectManager.DeleteUnusedGLObjects">
            <summary>
            The appropriate GL.Delete() function is called for all <see cref="T:SFGraphics.GLObjects.GLObject"/> instances
            that have been finalized.
            </summary>
        </member>
        <member name="T:SFGraphics.GLObjects.GLObjectManagement.ReferenceCounting">
            <summary>
            Provides helpers for maintaining object reference counts.
            <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> allows references to be incremented and
            decremented from separate threads.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.GLObjectManagement.ReferenceCounting.IncrementReference``1(System.Collections.Concurrent.ConcurrentDictionary{``0,System.Int32},``0)">
            <summary>
            Increments the reference for <paramref name="objToIncrement"/> or 
            initializes to 1 if not found.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="referenceCountByObject"></param>
            <param name="objToIncrement"></param>
        </member>
        <member name="M:SFGraphics.GLObjects.GLObjectManagement.ReferenceCounting.DecrementReference``1(System.Collections.Concurrent.ConcurrentDictionary{``0,System.Int32},``0)">
            <summary>
            Decrements the reference count for <paramref name="objToDecrement"/> if
            the reference count is greater than zero.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="referenceCountByObject"></param>
            <param name="objToDecrement"></param>
        </member>
        <member name="M:SFGraphics.GLObjects.GLObjectManagement.ReferenceCounting.GetObjectsWithNoReferences``1(System.Collections.Concurrent.ConcurrentDictionary{``0,System.Int32})">
            <summary>
            Finds objects with zero references that can have their unmanaged data safely deleted.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="referenceCountByObject"></param>
            <returns>A hashset of objects with zero references</returns>
        </member>
        <member name="T:SFGraphics.GLObjects.GLObject">
            <summary>
            Provides a simpler and less error prone way 
            to deal with the state and data associated with OpenGL objects. 
            </summary>
        </member>
        <member name="T:SFGraphics.GLObjects.GLObject.GLObjectType">
            <summary>
            The available types of OpenGL objects.
            Enables <see cref="T:SFGraphics.GLObjects.GLObjectManagement.GLObjectManager"/> to call the appropriate delete function.
            </summary>
        </member>
        <member name="F:SFGraphics.GLObjects.GLObject.GLObjectType.FramebufferObject">
            <summary>
            <see cref="T:SFGraphics.GLObjects.Framebuffers.Framebuffer"/>
            </summary>
        </member>
        <member name="F:SFGraphics.GLObjects.GLObject.GLObjectType.RenderbufferObject">
            <summary>
            <see cref="T:SFGraphics.GLObjects.RenderBuffers.Renderbuffer"/>
            </summary>
        </member>
        <member name="F:SFGraphics.GLObjects.GLObject.GLObjectType.Texture">
            <summary>
            <see cref="T:SFGraphics.GLObjects.Textures.Texture"/>
            </summary>
        </member>
        <member name="F:SFGraphics.GLObjects.GLObject.GLObjectType.ShaderProgram">
            <summary>
            <see cref="T:SFGraphics.GLObjects.Shaders.Shader"/>
            </summary>
        </member>
        <member name="F:SFGraphics.GLObjects.GLObject.GLObjectType.BufferObject">
            <summary>
            <see cref="T:SFGraphics.GLObjects.BufferObjects.BufferObject"/>
            </summary>
        </member>
        <member name="F:SFGraphics.GLObjects.GLObject.GLObjectType.VertexArrayObject">
            <summary>
            <see cref="T:SFGraphics.GLObjects.VertexArrays.VertexArrayObject"/>
            </summary>
        </member>
        <member name="F:SFGraphics.GLObjects.GLObject.GLObjectType.SamplerObject">
            <summary>
            <see cref="T:SFGraphics.GLObjects.Samplers.SamplerObject"/>
            </summary>
        </member>
        <member name="F:SFGraphics.GLObjects.GLObject.Id">
            <summary>
            The value generated by GL.GenTexture(), GL.GenProgram(), etc. 
            <para></para><para></para>
            Do not use <see cref="F:SFGraphics.GLObjects.GLObject.Id"/> after the container object is unreachable.
            Changes made using this value may not be reflected in the wrapper classes.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.GLObject.ObjectType">
            <summary>
            The type of object.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.GLObject.#ctor(System.Int32)">
            <summary>
            Increments the reference count and initializes <see cref="F:SFGraphics.GLObjects.GLObject.Id"/>.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.GLObject.Finalize">
            <summary>
            Decrements the reference count for <see cref="F:SFGraphics.GLObjects.GLObject.Id"/>.
            The object can't be deleted here because finalizers are called from a separate thread.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.GLObject.ToString">
            <summary>
            Returns the type of OpenGL object and the integer ID generated by OpenGL.
            Example: "ShaderProgram ID: 1"
            </summary>
            <returns>The object's type and ID</returns>
        </member>
        <member name="T:SFGraphics.GLObjects.RenderBuffers.Renderbuffer">
            <summary>
            Encapsulates a renderbuffer object, 
            a framebuffer attachment that supports multisampling.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.RenderBuffers.Renderbuffer.Width">
            <summary>
            The width of the renderbuffer in pixels.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.RenderBuffers.Renderbuffer.Height">
            <summary>
            The height of the renderbuffer in pixels.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.RenderBuffers.Renderbuffer.#ctor(System.Int32,System.Int32,OpenTK.Graphics.OpenGL.RenderbufferStorage)">
            <summary>
            Creates and allocates storage for an empty renderbuffer. 
            </summary>
            <param name="width">The width of the renderbuffer in pixels</param>
            <param name="height">The height of the renderbuffer in pixels</param>
            <param name="internalFormat">The format for storing the image data</param>
        </member>
        <member name="M:SFGraphics.GLObjects.RenderBuffers.Renderbuffer.#ctor(System.Int32,System.Int32,System.Int32,OpenTK.Graphics.OpenGL.RenderbufferStorage)">
            <summary>
            Creates and allocates storage for an empty multisampled renderbuffer.
            </summary>
            <param name="width">The width of the renderbuffer in pixels</param>
            <param name="height">The height of the renderbuffer in pixels</param>
            <param name="samples">The number of samples to use for multisampling</param>
            <param name="internalFormat">The format for storing the image data</param>
        </member>
        <member name="M:SFGraphics.GLObjects.RenderBuffers.Renderbuffer.Bind">
            <summary>
            Binds <see cref="F:SFGraphics.GLObjects.GLObject.Id"/> to the RenderbufferTarget.Renderbuffer target.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.RenderBuffers.Renderbuffer.Attach(OpenTK.Graphics.OpenGL.FramebufferAttachment,SFGraphics.GLObjects.Framebuffers.Framebuffer)">
            <summary>
            Binds the renderbuffer to <paramref name="attachment"/> for
            <paramref name="target"/>.
            </summary>
            <param name="attachment">The attachment point</param>
            <param name="target">The target framebuffer for attachment</param>
        </member>
        <member name="T:SFGraphics.GLObjects.Samplers.SamplerObject">
            <summary>
            Allows for setting texture state per texture unit rather than per texture.
            The texture parameters of the bound sampler object are used instead of the texture's parameters.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Samplers.SamplerObject.MinFilter">
            <summary>
            Updates the SamplerParameter when set.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Samplers.SamplerObject.MagFilter">
            <summary>
            Updates the SamplerParameter when set.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Samplers.SamplerObject.TextureWrapS">
            <summary>
            Updates the SamplerParameter when set.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Samplers.SamplerObject.TextureWrapT">
            <summary>
            Updates the SamplerParameter when set.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Samplers.SamplerObject.TextureWrapR">
            <summary>
            Updates the SamplerParameter when set.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Samplers.SamplerObject.#ctor">
            <summary>
            Creates an unitialized sampler object. 
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Samplers.SamplerObject.Bind(System.Int32)">
            <summary>
            Binds the Id to <paramref name="textureUnit"/>.
            This sampler's state will override the state of the bound texture.
            </summary>
            <param name="textureUnit"></param>
        </member>
        <member name="T:SFGraphics.GLObjects.Shaders.ShaderEventArgs.LinkStatusEventArgs">
            <summary>
            Contains information about a shader program linking.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Shaders.ShaderEventArgs.LinkStatusEventArgs.LinkStatus">
            <summary>
            <c>true</c> if the shader program linked successfully.
            </summary>
        </member>
        <member name="T:SFGraphics.GLObjects.Shaders.ShaderEventArgs.TextureSetEventArgs">
            <summary>
            Contains the data used to set a shader sampler uniform variable.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Shaders.ShaderEventArgs.TextureSetEventArgs.Name">
            <summary>
            The name of the uniform variable.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Shaders.ShaderEventArgs.TextureSetEventArgs.Type">
            <summary>
            The data type of the texture uniform.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Shaders.ShaderEventArgs.TextureSetEventArgs.Value">
            <summary>
            The texture used to initialize the uniform variable.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Shaders.ShaderEventArgs.TextureSetEventArgs.TextureUnit">
            <summary>
            The texture unit to which <see cref="P:SFGraphics.GLObjects.Shaders.ShaderEventArgs.TextureSetEventArgs.Value"/> was bound.
            </summary>
        </member>
        <member name="T:SFGraphics.GLObjects.Shaders.ShaderEventArgs.UniformSetEventArgs">
            <summary>
            Contains the data used to set a shader uniform variable.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Shaders.ShaderEventArgs.UniformSetEventArgs.Name">
            <summary>
            The name of the uniform variable.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Shaders.ShaderEventArgs.UniformSetEventArgs.Type">
            <summary>
            The data type of the uniform.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Shaders.ShaderEventArgs.UniformSetEventArgs.Value">
            <summary>
            The value used to initialize the uniform variable.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Shaders.ShaderEventArgs.UniformSetEventArgs.Size">
            <summary>
            The number of components for <see cref="P:SFGraphics.GLObjects.Shaders.ShaderEventArgs.UniformSetEventArgs.Value"/>.
            </summary>
        </member>
        <member name="T:SFGraphics.GLObjects.Shaders.Utils.ShaderLog">
            <summary>
            Stores hardware info, OpenGL/GLSL version, invalid uniform/attribute names, shader compilation errors, and linker errors.
            </summary>
        </member>
        <member name="T:SFGraphics.GLObjects.Shaders.Utils.ShaderValidation">
            <summary>
            Contains methods for validating <see cref="T:SFGraphics.GLObjects.Shaders.Shader"/> objects prior to rendering.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Utils.ShaderValidation.GetProgramLinkStatus(System.Int32)">
            <summary>
            Returns <c>true</c> if the program linked successfully.
            </summary>
            <param name="programId">The program ID generated by OpenGL</param>
            <returns><c>true</c> if the program linked successfully</returns>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Utils.ShaderValidation.GetProgramValidateStatus(System.Int32)">
            <summary>
            Returns <c>true</c> if the program status is valid for rendering.
            </summary>
            <param name="programId">The program ID generated by OpenGL</param>
            <returns><c>true</c> if the program status is valid for rendering</returns>
        </member>
        <member name="T:SFGraphics.GLObjects.Shaders.Shader">
            <summary>
            Encapsulates a shader program and attached shaders. 
            Errors are stored to an internal log, which can be exported with <see cref="M:SFGraphics.GLObjects.Shaders.Shader.GetErrorLog"/>.
            <para></para> <para></para>
            Ensure that <see cref="P:SFGraphics.GLObjects.Shaders.Shader.LinkStatusIsOk"/> returns <c>true</c> before rendering to avoid crashes.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetFloat(System.String,System.Single)">
            <summary>
            Sets a float uniform variable. Logs invalid names.
            </summary>
            <param name="name">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetFloat(System.String,System.Single[])">
            <summary>
            Sets all values for a float[] uniform variable. Logs invalid names.
            </summary>
            <param name="name">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetInt(System.String,System.Int32)">
            <summary>
            Sets an int uniform variable. Logs invalid names.
            </summary>
            <param name="name">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetInt(System.String,System.Int32[])">
            <summary>
            Sets all values for an int[] uniform variable. Logs invalid names.
            </summary>
            <param name="name">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetUint(System.String,System.UInt32)">
            <summary>
            Sets a uint uniform variable. Logs invalid names.
            </summary>
            <param name="name">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetUint(System.String,System.UInt32[])">
            <summary>
            Sets all values for a uint[] uniform variable. Logs invalid names.
            </summary>
            <param name="name">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetBoolToInt(System.String,System.Boolean)">
            <summary>
            Converts <paramref name="value"/> to an int and sets an int uniform. 
            <c>true</c> = 1. <c>false</c> = 0. uniform variable. Logs invalid names.
            </summary>
            <param name="name">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetVector2(System.String,OpenTK.Vector2)">
            <summary>
            Sets vec2 uniform variable. Logs invalid names.
            </summary>
            <param name="name">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetVector2(System.String,OpenTK.Vector2[])">
            <summary>
            Sets all values for a vec2[] uniform variable. Logs invalid names.
            </summary>
            <param name="name">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetVector2(System.String,System.Single,System.Single)">
            <summary>
            Sets vec2 uniform variable. Logs invalid names.
            </summary>
            <param name="name">The uniform variable name</param>
            <param name="x">The value for name.x</param>
            <param name="y">The value for name.y</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetVector3(System.String,OpenTK.Vector3)">
            <summary>
            Sets vec3 uniform variable. Logs invalid names.
            </summary>
            <param name="name">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetVector3(System.String,OpenTK.Vector3[])">
            <summary>
            Sets all values for a vec3 uniform variable. Logs invalid names.
            </summary>
            <param name="name">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetVector3(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Sets vec3 uniform variable. Logs invalid names.
            </summary>
            <param name="name">The uniform variable name</param>
            <param name="x">The value for name.x</param>
            <param name="y">The value for name.y</param>
            <param name="z">The value for name.z</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetVector4(System.String,OpenTK.Vector4)">
            <summary>
            Sets vec4 uniform variable. Logs invalid names.
            </summary>
            <param name="name">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetVector4(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets vec4 uniform variable. Logs invalid names.
            </summary>
            <param name="name">The uniform variable name</param>
            <param name="x">The value for name.x</param>
            <param name="y">The value for name.y</param>
            <param name="z">The value for name.z</param>
            <param name="w">The value for name.w</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetVector4(System.String,OpenTK.Vector4[])">
            <summary>
            Sets all values for a vec4 uniform variable. Logs invalid names.
            </summary>
            <param name="name">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetMatrix4x4(System.String,OpenTK.Matrix4@)">
            <summary>
            Sets a mat4 uniform variable. Logs invalid names.
            </summary>
            <param name="name">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetMatrix4x4(System.String,OpenTK.Matrix4[])">
            <summary>
            Sets all values for a mat4[] uniform variable. Logs invalid names.
            </summary>
            <param name="name">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetTexture(System.String,SFGraphics.GLObjects.Textures.Texture,System.Int32)">
            <summary>
            <paramref name="texture"/> is bound to <paramref name="textureUnit"/> before 
            setting the uniform. 
            Logs invalid names.
            </summary>
            <param name="name">The uniform variable name</param>
            <param name="texture">The integer ID generated by GL.GenTexture()</param>
            <param name="textureUnit">The texture unit to which <paramref name="texture"/> will be bound</param>
        </member>
        <member name="P:SFGraphics.GLObjects.Shaders.Shader.LinkStatusIsOk">
            <summary>
            If <c>false</c>, rendering with this shader will most likely throw an <see cref="T:System.AccessViolationException"/>.
            <para></para><para></para>
            Does not reflect changes made using <see cref="F:SFGraphics.GLObjects.GLObject.Id"/> directly.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Shaders.Shader.ValidateStatusIsOk">
            <summary>
            <c>true</c> when only one sampler type is used for each texture unit
            and the number of active samplers does not exceed the allowed maximum.
            <para></para><para></para>
            This should be checked at runtime and only for debugging purposes.
            </summary>
        </member>
        <member name="T:SFGraphics.GLObjects.Shaders.Shader.InvalidUniformSetEventHandler">
            <summary>
            
            </summary>
            <param name="sender">The shader that generated the error</param>
            <param name="e">The arguments used to set the uniform</param>
        </member>
        <member name="T:SFGraphics.GLObjects.Shaders.Shader.InvalidTextureSetEventHandler">
            <summary>
            
            </summary>
            <param name="sender">The shader that generated the error</param>
            <param name="e">The arguments used to set the uniform</param>
        </member>
        <member name="T:SFGraphics.GLObjects.Shaders.Shader.LinkStatusChangedEventHandler">
            <summary>
            
            </summary>
            <param name="sender">The shader that generated the event</param>
            <param name="e">Information about the previous shader program linking. 
            <c>true</c> when linking was successful</param>
        </member>
        <member name="E:SFGraphics.GLObjects.Shaders.Shader.OnInvalidUniformSet">
            <summary>
            Occurs when arguments for setting a uniform don't match the shader.
            </summary>
        </member>
        <member name="E:SFGraphics.GLObjects.Shaders.Shader.OnTextureUnitTypeMismatch">
            <summary>
            Occurs when a call to <see cref="M:SFGraphics.GLObjects.Shaders.Shader.SetTexture(System.String,SFGraphics.GLObjects.Textures.Texture,System.Int32)"/>
            is made to a previously used texture unit but with a different sampler type.
            </summary>
        </member>
        <member name="E:SFGraphics.GLObjects.Shaders.Shader.OnLinkStatusChanged">
            <summary>
            Occurs when the value of <see cref="P:SFGraphics.GLObjects.Shaders.Shader.LinkStatusIsOk"/> changes.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.#ctor">
            <summary>
            Creates an uninitialized shader program. Load shaders before using the shader program.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.UseProgram">
            <summary>
            Use <see cref="F:SFGraphics.GLObjects.GLObject.Id"/> as the current program.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.EnableVertexAttributes">
            <summary>
            Enables the vertex attribute arrays for all active attributes.
            Use a <see cref="T:SFGraphics.GLObjects.VertexArrays.VertexArrayObject"/> for modern OpenGL.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.DisableVertexAttributes">
            <summary>
            Disables the vertex attribute arrays for all active attributes.
            Use a <see cref="T:SFGraphics.GLObjects.VertexArrays.VertexArrayObject"/> for modern OpenGL.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.AttachShader(System.Int32,OpenTK.Graphics.OpenGL.ShaderType,System.String)">
            <summary>
            Attaches <paramref name="shaderId"/> and links the program. 
            The value for <see cref="P:SFGraphics.GLObjects.Shaders.Shader.LinkStatusIsOk"/> is updated.
            </summary>
            <param name="shaderId">The integer ID returned by <see cref="M:SFGraphics.GLObjects.Shaders.Shader.CreateGlShader(System.String,OpenTK.Graphics.OpenGL.ShaderType)"/></param>
            <param name="shaderType">The type of shader.
            Ex: ShaderType.FragmentShader</param>        
            <param name="shaderName"></param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.LoadShader(System.String,OpenTK.Graphics.OpenGL.ShaderType,System.String)">
            <summary>
            Compiles and attaches a single shader from <paramref name="shaderSource"/>.
            Performs linking and shader setup.
            </summary>
            <param name="shaderSource">The shader code source</param>
            <param name="shaderType">The type of shader to load</param>
            <param name="shaderName">The title used for the compilation errors section of the error log</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.LoadShaders(System.Collections.Generic.List{System.Tuple{System.String,OpenTK.Graphics.OpenGL.ShaderType,System.String}})">
            <summary>
            Compiles and attaches multiple shaders. Linking and setup is performed only once.
            </summary>
            <param name="shaders">(shader source, shader type, shader name)</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.LoadShaders(System.String,System.String)">
            <summary>
            Compiles and attaches shaders from <paramref name="fragmentSource"/> and <paramref name="vertexSource"/>.
            </summary>
            <param name="vertexSource">The vertex shader source</param>
            <param name="fragmentSource">The fragment shader source</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.CreateGlShader(System.String,OpenTK.Graphics.OpenGL.ShaderType)">
            <summary>
            Creates and compiles a new shader from <paramref name="shaderSource"/>.
            Returns the ID created by GL.CreateShader(). 
            Shaders can be attached with <see cref="M:SFGraphics.GLObjects.Shaders.Shader.AttachShader(System.Int32,OpenTK.Graphics.OpenGL.ShaderType,System.String)"/>
            </summary>
            <param name="shaderSource">A string containing the shader source text</param>
            <param name="shaderType">The type of shader to create</param>
            <returns>The integer ID created by GL.CreateShader()</returns>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.GetProgramBinary(OpenTK.Graphics.OpenGL.BinaryFormat@)">
            <summary>
            Gets the compiled program binary for the program <see cref="F:SFGraphics.GLObjects.GLObject.Id"/>.
            This method should be called after the shaders are loaded and the program is linked.
            Hardware or software changes may cause compatibility issues with the program binary.
            </summary>
            <param name="binaryFormat"></param>
            <returns></returns>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.LoadProgramBinary(System.Byte[],OpenTK.Graphics.OpenGL.BinaryFormat)">
            <summary>
            Loads the entire program from the compiled binary and format generated 
            by <see cref="M:SFGraphics.GLObjects.Shaders.Shader.GetProgramBinary(OpenTK.Graphics.OpenGL.BinaryFormat@)"/>.
            The value returned by <see cref="P:SFGraphics.GLObjects.Shaders.Shader.LinkStatusIsOk"/> is updated.
            <para></para><para></para>
            Hardware or software changes may cause compatibility issues with the program binary.
            If program creation fails with precompiled binaries, resort to compiling the shaders from source. 
            </summary>
            <param name="binaryFormat">The format of the compiled binary</param>
            <param name="programBinary">The compiled program binary</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.GetShaderSources">
            <summary>
            Gets the shader source for all attached shaders.
            </summary>
            <returns>An array of shader sources for all attached shaders</returns>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.GetUniformLocation(System.String)">
            <summary>
            Gets the uniform's location from locations stored after linking.
            </summary>
            <param name="name">The name of the uniform variable</param>
            <returns>The location of <paramref name="name"/></returns>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.GetAttribLocation(System.String)">
            <summary>
            Gets the attribute's location from locations stored after linking.
            </summary>
            <param name="name">The name of the vertex attribute variable</param>
            <returns>The location of <paramref name="name"/></returns>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.GetUniformBlockIndex(System.String)">
            <summary>
            Gets the block index of a uniform block.
            </summary>
            <param name="name">The name of the uniform block</param>
            <returns>The index of <paramref name="name"/></returns>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.UniformBlockBinding(System.String,System.Int32)">
            <summary>
            Sets the binding point for a uniform block.
            Invalid names are ignored. 
            </summary>
            <param name="name">The name of the uniform block</param>
            <param name="bindingPoint">The binding point for the uniform block</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bindingPoint"/> is negative</exception>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.GetErrorLog">
            <summary>
            Gets the error log containing hardware info, version number, compilation/linker errors, 
            and attempts to initialize invalid uniform or vertex attribute names.
            </summary>
            <returns>A String of all detected errors</returns>
        </member>
        <member name="T:SFGraphics.GLObjects.Textures.Utils.MipmapLoading">
            <summary>
            Provides methods for loading mipmaps for OpenGL textures. 
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Utils.MipmapLoading.LoadCompressedMipMaps``1(OpenTK.Graphics.OpenGL.TextureTarget,System.Int32,System.Int32,System.Collections.Generic.List{``0[]},OpenTK.Graphics.OpenGL.InternalFormat)">
            <summary>
            Loads compressed 2D image data of the compressed format <paramref name="format"/> 
            for all the mip levels in <paramref name="mipmaps"/>.
            The texture must first be bound to the proper target.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target of the texture or cube face for loading mip maps</param>
            <param name="width">The width of the texture or cube map face in pixels</param>
            <param name="height">The height of the texture or cube map face in pixels</param>
            <param name="mipmaps">The list of mipmaps to load for <paramref name="target"/></param>
            <param name="format">The input format and internal format information</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Utils.MipmapLoading.LoadCompressedMipmaps(OpenTK.Graphics.OpenGL.TextureTarget,System.Int32,System.Int32,System.Collections.Generic.List{SFGraphics.GLObjects.BufferObjects.BufferObject},OpenTK.Graphics.OpenGL.InternalFormat)">
            <summary>
            
            </summary>
            <param name="target">The target of the texture or cube face for loading mip maps</param>
            <param name="width">The width of the texture or cube map face in pixels</param>
            <param name="height">The height of the texture or cube map face in pixels</param>
            <param name="mipmaps"></param>
            <param name="format">The input format and internal format information</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Utils.MipmapLoading.LoadUncompressedMipmaps(OpenTK.Graphics.OpenGL.TextureTarget,System.Int32,System.Int32,System.Collections.Generic.List{SFGraphics.GLObjects.BufferObjects.BufferObject},SFGraphics.GLObjects.Textures.TextureFormats.TextureFormatUncompressed)">
            <summary>
            
            </summary>
            <param name="target">The target of the texture or cube face for loading mip maps</param>
            <param name="width">The width of the texture or cube map face in pixels</param>
            <param name="height">The height of the texture or cube map face in pixels</param>
            <param name="mipmaps"></param>
            <param name="format">The input format and internal format information</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Utils.MipmapLoading.LoadBaseLevelGenerateMipmaps(OpenTK.Graphics.OpenGL.TextureTarget,System.Drawing.Bitmap)">
            <summary>
            Loads the base mip level from <paramref name="image"/> and generates mipmaps.
            Mipmaps are not generated for cube map targets.
            </summary>
            <param name="target">The target of the texture or cube face for loading mip maps. 
            Ex: Texture2D or TextureCubeMapPositiveX.</param>
            <param name="image"></param>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Utils.MipmapLoading.LoadBaseLevelGenerateMipmaps``1(OpenTK.Graphics.OpenGL.TextureTarget,System.Int32,System.Int32,``0[],OpenTK.Graphics.OpenGL.InternalFormat)">
            <summary>
            
            </summary>
            <typeparam name="T">The value type used for the image data. This inclues arithmetic types.</typeparam>
            <param name="target">The target of the texture or cube face for loading mip maps</param>
            <param name="width">The width of the texture or cube map face in pixels</param>
            <param name="height">The height of the texture or cube map face in pixels</param>
            <param name="baseMipLevel"></param>
            <param name="format">The input format and internal format information</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Utils.MipmapLoading.LoadBaseLevelGenerateMipmaps(OpenTK.Graphics.OpenGL.TextureTarget,System.Int32,System.Int32,SFGraphics.GLObjects.BufferObjects.BufferObject,OpenTK.Graphics.OpenGL.InternalFormat)">
            <summary>
            
            </summary>
            <param name="target">The target of the texture or cube face for loading mip maps</param>
            <param name="width">The width of the texture or cube map face in pixels</param>
            <param name="height">The height of the texture or cube map face in pixels</param>
            <param name="baseMipLevel"></param>
            <param name="internalFormat"></param>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Utils.MipmapLoading.LoadBaseLevelGenerateMipmaps``1(OpenTK.Graphics.OpenGL.TextureTarget,System.Int32,System.Int32,``0[],SFGraphics.GLObjects.Textures.TextureFormats.TextureFormatUncompressed)">
            <summary>
            
            </summary>
            <typeparam name="T">The value type used for the image data. This includes arithmetic types.</typeparam>
            <param name="target">The target of the texture or cube face for loading mipmaps</param>
            <param name="width">The width of the texture or cube map face in pixels</param>
            <param name="height">The height of the texture or cube map face in pixels</param>
            <param name="baseMipLevel"></param>
            <param name="format">The input format and internal format information</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Utils.MipmapLoading.LoadBaseLevelGenerateMipmaps(OpenTK.Graphics.OpenGL.TextureTarget,System.Int32,System.Int32,SFGraphics.GLObjects.BufferObjects.BufferObject,SFGraphics.GLObjects.Textures.TextureFormats.TextureFormatUncompressed)">
            <summary>
            
            </summary>
            <param name="target">The target of the texture or cube face for loading mip maps</param>
            <param name="width">The width of the texture or cube map face in pixels</param>
            <param name="height">The height of the texture or cube map face in pixels</param>
            <param name="baseMipLevel"></param>
            <param name="format">The input format and internal format information</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Utils.MipmapLoading.LoadFacesBaseLevel``1(System.Int32,SFGraphics.GLObjects.Textures.TextureFormats.TextureFormatUncompressed,``0[],``0[],``0[],``0[],``0[],``0[])">
            <summary>
            Loads image data for all six faces of a cubemap. No mipmaps are generated, so use a min filter
            that does not use mipmaps.
            </summary>
            <typeparam name="T">The value type used for the image data. This includes arithmetic types.</typeparam>
            <param name="length">The width and height of each cube map face in pixels</param>
            <param name="format"></param>
            <param name="posX"></param>
            <param name="negX"></param>
            <param name="posY"></param>
            <param name="negY"></param>
            <param name="posZ"></param>
            <param name="negZ"></param>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Utils.MipmapLoading.LoadFacesMipmaps``1(System.Int32,OpenTK.Graphics.OpenGL.InternalFormat,System.Collections.Generic.List{``0[]},System.Collections.Generic.List{``0[]},System.Collections.Generic.List{``0[]},System.Collections.Generic.List{``0[]},System.Collections.Generic.List{``0[]},System.Collections.Generic.List{``0[]})">
            <summary>
            Loads image data and mipmaps for all six faces of a cube map.
            </summary>
            <typeparam name="T">The value type used for the image data. This includes arithmetic types.</typeparam>
            <param name="length">The width and height of each cube map face in pixels</param>
            <param name="format"></param>
            <param name="mipsPosX"></param>
            <param name="mipsNegX"></param>
            <param name="mipsPosY"></param>
            <param name="mipsNegY"></param>
            <param name="mipsPosZ"></param>
            <param name="mipsNegZ"></param>
        </member>
        <member name="T:SFGraphics.GLObjects.Textures.Utils.TextureExceptionMessages">
            <summary>
            Error messages thrown by constructors for classes inheriting from <see cref="T:SFGraphics.GLObjects.Textures.Texture"/>.
            </summary>
        </member>
        <member name="F:SFGraphics.GLObjects.Textures.TextureFormats.CompressedBlockSize.blockSizeByFormat">
            <summary>
            A string is used instead of the enum because there are Ext versions of 
            some enum values with identical associated integers.
            </summary>
        </member>
        <member name="T:SFGraphics.GLObjects.Textures.TextureFormats.TextureFormatUncompressed">
            <summary>
            Stores uncompressed texture format information.
            </summary>
        </member>
        <member name="F:SFGraphics.GLObjects.Textures.TextureFormats.TextureFormatUncompressed.pixelInternalFormat">
            <summary>
            The format used by OpenGL to store the data
            </summary>
        </member>
        <member name="F:SFGraphics.GLObjects.Textures.TextureFormats.TextureFormatUncompressed.pixelFormat">
            <summary>
            The format of the color components for the input data.
            </summary>
        </member>
        <member name="F:SFGraphics.GLObjects.Textures.TextureFormats.TextureFormatUncompressed.pixelType">
            <summary>
            The data type of each color component for the input data
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.TextureFormats.TextureFormatUncompressed.#ctor(OpenTK.Graphics.OpenGL.PixelInternalFormat,OpenTK.Graphics.OpenGL.PixelFormat,OpenTK.Graphics.OpenGL.PixelType)">
            <summary>
            Initializes the format information for an uncompressed format.
            </summary>
            <param name="pixelInternalFormat">The format used by OpenGL to store the data</param>
            <param name="pixelFormat">The format of the color components for the input data</param>
            <param name="pixelType">The data type of each color component for the input data</param>
            <exception cref="T:System.ArgumentException"><paramref name="pixelInternalFormat"/> is a compressed format.</exception>
        </member>
        <member name="T:SFGraphics.GLObjects.Textures.TextureFormats.TextureFormatTools">
            <summary>
            Helpful tools for working with PixelInternalFormat and InternalFormat 
            with OpenGLs texture functions.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.TextureFormats.TextureFormatTools.CalculateImageSize(System.Int32,System.Int32,OpenTK.Graphics.OpenGL.InternalFormat)">
            <summary>
            Calculates the image size parameter for GL.CompressedTexImage. 
            The image size should be recalculated for each mip level.
            </summary>
            <param name="width">The width of the mip level in pixels</param>
            <param name="height">The height of the mip level in pixels</param>
            <param name="format">The compressed image format.</param>
            <returns>The image size in bytes for data of the specified dimensions and format</returns>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.TextureFormats.TextureFormatTools.IsCompressed(OpenTK.Graphics.OpenGL.InternalFormat)">
            <summary>
            Determines whether a format is compressed.
            Compressed formats should use GL.CompressedTexImage instead of GL.TexImage.
            </summary>
            <param name="format">The image format for the texture data</param>
            <returns>True if the format is compressed</returns>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.TextureFormats.TextureFormatTools.IsCompressed(OpenTK.Graphics.OpenGL.PixelInternalFormat)">
            <summary>
            Determines whether a format is compressed.
            Compressed formats should use GL.CompressedTexImage instead of GL.TexImage.
            </summary>
            <param name="format">The image format for the Image data</param>
            <returns>True if the format is compressed</returns>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.TextureFormats.TextureFormatTools.IsGenericCompressed(OpenTK.Graphics.OpenGL.PixelInternalFormat)">
            <summary>
            Determines whether a format is a generic compressed format.
            Image data can not be uploaded in these formats.
            </summary>
            <param name="format">The image format for the image data</param>
            <returns><c>true</c> if the format is a generic compressed format</returns>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.TextureFormats.TextureFormatTools.IsGenericCompressed(OpenTK.Graphics.OpenGL.InternalFormat)">
            <summary>
            Determines whether a format is a generic compressed format.
            Image data can not be uploaded in these formats.
            </summary>
            <param name="format">The image format for the image data</param>
            <returns><c>true</c> if the format is a generic compressed format</returns>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.TextureFormats.TextureFormatTools.IsDepthFormat(OpenTK.Graphics.OpenGL.PixelInternalFormat)">
            <summary>
            Determines if <paramref name="format"/> is a valid format for a 
            <see cref="T:SFGraphics.GLObjects.Textures.DepthTexture"/>.
            </summary>
            <param name="format">The image format for the texture data</param>
            <returns>True if the format is a valid depth texture format</returns>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.TextureFormats.TextureFormatTools.IsGenericCompressedFormat(OpenTK.Graphics.OpenGL.InternalFormat)">
            <summary>
            Determines if <paramref name="format"/> is a generic compressed format,
            which are implementation dependent and do not work for loading texture data.
            </summary>
            <param name="format">The image format of the texture data</param>
            <returns>True if the format is a generic compressed format</returns>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.TextureFormats.TextureFormatTools.IsCubeMapTarget(OpenTK.Graphics.OpenGL.TextureTarget)">
            <summary>
            Returns true if the target is a cube map target.
            </summary>
            <param name="target">The texture target</param>
            <returns>True if the target is a cube map target</returns>
        </member>
        <member name="T:SFGraphics.GLObjects.Textures.Texture2DMultisample">
            <summary>
            A TextureTarget.Texture2DMultisample texture that does not support mipmaps.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Textures.Texture2DMultisample.Samples">
            <summary>
            The number of texture samples.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture2DMultisample.#ctor(System.Int32,System.Int32,OpenTK.Graphics.OpenGL.PixelInternalFormat,System.Int32)">
            <summary>
            Creates a multisampled 2D texture of the given dimensions and format
            </summary>
            <param name="width">The width of the texture in pixels</param>
            <param name="height">The height of the texture in pixels</param>
            <param name="format">The format used to store the image data</param>
            <param name="samples">The number of texture samples</param>
        </member>
        <member name="T:SFGraphics.GLObjects.Textures.DepthTexture">
            <summary>
            A simple texture for storing depth information. 
            The texture can be attached to a <see cref="T:SFGraphics.GLObjects.Framebuffers.Framebuffer"/> object for shadow mapping and other effects.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.DepthTexture.#ctor(System.Int32,System.Int32,OpenTK.Graphics.OpenGL.PixelInternalFormat)">
            <summary>
            Creates an empty depth texture of the specified dimensions and format. 
            This texture does not use mipmaps.
            The border color is set to white, so attempts to sample outside the texture's border will return white.
            </summary>
            <param name="width">The width of the texture in pixels</param>
            <param name="height">The height of the texture in pixels</param>
            <param name="pixelInternalFormat">The internal format of the image data. This should be a valid depth format.</param>
        </member>
        <member name="T:SFGraphics.GLObjects.Textures.Texture">
            <summary>
            Encapsulates an OpenGL texture object. 
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Textures.Texture.Width">
            <summary>
            The width of the base mip level in pixels.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Textures.Texture.Height">
            <summary>
            The height of the base mip level in pixels.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Textures.Texture.TextureTarget">
            <summary>
            The <see cref="T:OpenTK.Graphics.OpenGL.TextureTarget"/> for this texture.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Textures.Texture.MinFilter">
            <summary>
            The algorithm used when scaling the texture below its actual size.
            Defaults to LinearMipMapLinear.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Textures.Texture.MagFilter">
            <summary>
            The algorithm used when scaling the texture above its actual size.
            Defaults to linear.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Textures.Texture.TextureWrapS">
            <summary>
            The wrap mode for the first component of texture coordinates.
            Defaults to ClampToEdge.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Textures.Texture.TextureWrapT">
            <summary>
            The wrap mode for the second component of texture coordinates.
            Defaults to ClampToEdge.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Textures.Texture.TextureWrapR">
            <summary>
            The wrap mode for the third component of texture coordinates.
            Defaults to ClampToEdge.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture.#ctor(OpenTK.Graphics.OpenGL.TextureTarget)">
            <summary>
            Creates an empty texture of the specified target.
            </summary>
            <param name="textureTarget">The target to which <see cref="F:SFGraphics.GLObjects.GLObject.Id"/> is bound.</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture.Bind">
            <summary>
            Binds the Id to <see cref="P:SFGraphics.GLObjects.Textures.Texture.TextureTarget"/>.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture.Attach(OpenTK.Graphics.OpenGL.FramebufferAttachment,SFGraphics.GLObjects.Framebuffers.Framebuffer)">
            <summary>
            Binds the texture to <paramref name="attachment"/> for
            <paramref name="target"/>.
            </summary>
            <param name="attachment">The attachment point</param>
            <param name="target">The target framebuffer for attachment</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture.GetImageData(System.Int32)">
            <summary>
            Gets the image data for <paramref name="mipLevel"/>
            in an RGBA unsigned byte format.
            </summary>
            <param name="mipLevel">The mip level to read</param>
            <returns>The image data for <paramref name="mipLevel"/></returns>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture.GetBitmap(System.Int32)">
            <summary>
            Gets the image data for <paramref name="mipLevel"/>
            in an ABGR unsigned byte format.
            </summary>
            <param name="mipLevel">The mip level to read</param>
            <returns>The image data for <paramref name="mipLevel"/></returns>
        </member>
        <member name="T:SFGraphics.GLObjects.Textures.Texture2D">
            <summary>
            A TextureTarget.Texture2D texture that supports mipmaps.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture2D.#ctor">
            <summary>
            Creates an empty 2D texture. 
            The texture is incomplete until the dimensions and format are set.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture2D.LoadImageData(System.Int32,System.Int32,SFGraphics.GLObjects.Textures.TextureFormats.TextureFormatUncompressed)">
            <summary>
            Specifies the texture's dimensions and format but leaves the image data
            uninitialized.
            </summary>
            <param name="width">The new width in pixels</param>
            <param name="height">The new height in pixels</param>
            <param name="format">The format to store the image data</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture2D.LoadImageData(System.Drawing.Bitmap)">
            <summary>
            Loads RGBA texture data with mipmaps generated from the specified bitmap.
            Binds the texture.
            </summary>
            <param name="image">the image data for the base mip level</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture2D.LoadImageData``1(System.Int32,System.Int32,``0[],OpenTK.Graphics.OpenGL.InternalFormat)">
            <summary>
            Loads texture data of the specified format for the first mip level.
            Mipmaps are generated by OpenGL.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="width">The width of <paramref name="baseMipLevel"/> in pixels</param>
            <param name="height">The height of <paramref name="baseMipLevel"/> in pixels</param>
            <param name="baseMipLevel">The image data to load for the first mip level. The other levels are generated.</param>
            <param name="internalFormat">The image format of <paramref name="baseMipLevel"/></param>
            <exception cref="T:System.ArgumentException"><paramref name="internalFormat"/> is not a compressed format.</exception>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture2D.LoadImageData(System.Int32,System.Int32,SFGraphics.GLObjects.BufferObjects.BufferObject,OpenTK.Graphics.OpenGL.InternalFormat)">
            <summary>
            Loads texture data of the specified format for the first mip level.
            Mipmaps are generated by OpenGL.
            </summary>
            <param name="width">The width of <paramref name="baseMipLevel"/> in pixels</param>
            <param name="height">The height of <paramref name="baseMipLevel"/> in pixels</param>
            <param name="baseMipLevel">The image data of the first mip level</param>
            <param name="internalFormat">The image format for all mipmaps</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture2D.LoadImageData``1(System.Int32,System.Int32,``0[],SFGraphics.GLObjects.Textures.TextureFormats.TextureFormatUncompressed)">
            <summary>
            Loads texture data of the specified format for the first mip level.
            Mipmaps are generated by OpenGL.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="width">The width of <paramref name="baseMipLevel"/> in pixels</param>
            <param name="height">The height of <paramref name="baseMipLevel"/> in pixels</param>
            <param name="baseMipLevel">The image data of the first mip level</param>
            <param name="format">The image format for all mipmaps</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture2D.LoadImageData(System.Int32,System.Int32,SFGraphics.GLObjects.BufferObjects.BufferObject,SFGraphics.GLObjects.Textures.TextureFormats.TextureFormatUncompressed)">
            <summary>
            Loads texture data of the specified format for the first mip level.
            Mipmaps are generated by OpenGL.
            </summary>
            <param name="width">The width of the base mip level in pixels</param>
            <param name="height">The height of the base mip level in pixels</param>
            <param name="baseMipLevel">The image data of the first mip level</param>
            <param name="format">The image format for all mipmaps</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture2D.LoadImageData``1(System.Int32,System.Int32,System.Collections.Generic.List{``0[]},OpenTK.Graphics.OpenGL.InternalFormat)">
            <summary>
            Loads a mip level of compressed texture data
            for each array in <paramref name="mipmaps"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="width">The width of the base mip level in pixels</param>
            <param name="height">The height of the base mip level in pixels</param>
            <param name="mipmaps">The image data for each mip level</param>
            <param name="internalFormat">The image format of <paramref name="mipmaps"/></param>
            <exception cref="T:System.ArgumentException"><paramref name="internalFormat"/> is not a compressed format.</exception>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture2D.LoadImageData(System.Int32,System.Int32,System.Collections.Generic.List{SFGraphics.GLObjects.BufferObjects.BufferObject},SFGraphics.GLObjects.Textures.TextureFormats.TextureFormatUncompressed)">
            <summary>
            
            </summary>
            <param name="width">The width of the base mip level in pixels</param>
            <param name="height">The height of the base mip level in pixels</param>
            <param name="mipmaps">The image data for each mip level</param>
            <param name="format">The image format of <paramref name="mipmaps"/></param>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture2D.LoadImageData(System.Int32,System.Int32,System.Collections.Generic.List{SFGraphics.GLObjects.BufferObjects.BufferObject},OpenTK.Graphics.OpenGL.InternalFormat)">
            <summary>
            
            </summary>
            <param name="width">The width of the base mip level in pixels</param>
            <param name="height">The height of the base mip level in pixels</param>
            <param name="mipmaps">The image data for each mip level</param>
            <param name="internalFormat">The image format of <paramref name="mipmaps"/></param>
        </member>
        <member name="T:SFGraphics.GLObjects.Textures.TextureCubeMap">
            <summary>
            A TextureTarget.TextureCubeMap texture that supports mipmaps.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.TextureCubeMap.#ctor">
            <summary>
            Creates an empty cube map texture. 
            The texture is incomplete until the dimensions and format are set.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.TextureCubeMap.LoadImageData(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Initializes an uncompressed cube map without mipmaps from vertically arranged faces in <paramref name="cubeMapFaces"/>.
            </summary>
            <param name="cubeMapFaces">Faces arranged from top to bottom in the order
            X+, X-, Y+, Y-, Z+, Z- </param>
            <param name="faceSideLength">The length in pixels of a side of any of the faces</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.TextureCubeMap.LoadImageData(System.Int32,OpenTK.Graphics.OpenGL.InternalFormat,System.Collections.Generic.List{System.Byte[]},System.Collections.Generic.List{System.Byte[]},System.Collections.Generic.List{System.Byte[]},System.Collections.Generic.List{System.Byte[]},System.Collections.Generic.List{System.Byte[]},System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Initializes a compressed cube map with mipmaps.
            Each face should have the same dimensions, image format, and number of mipmaps.
            </summary>
            <param name="faceSideLength">The side length in pixels of each face. Faces must be square.</param>
            <param name="internalFormat"></param>
            <param name="mipsPosX">Mipmaps for the positive x target</param>
            <param name="mipsNegX">Mipmaps for the negative x target</param>
            <param name="mipsPosY">Mipmaps for the positive y target</param>
            <param name="mipsNegY">Mipmaps for the negative y target</param>
            <param name="mipsPosZ">Mipmaps for the positive z target</param>
            <param name="mipsNegZ">Mipmaps for the negative z target</param>
            <exception cref="T:System.ArgumentException"><paramref name="internalFormat"/> is not a compressed format.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The mipmap counts are not equal for all faces.</exception>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.TextureCubeMap.LoadImageData(System.Int32,SFGraphics.GLObjects.Textures.TextureFormats.TextureFormatUncompressed,System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes an uncompressed cube map without mipmaps.
            Each face should have the same dimensions and image format.
            </summary>
            <param name="faceSideLength"></param>
            <param name="textureFormat"></param>
            <param name="facePosX">The base mip level for the positive x target</param>
            <param name="faceNegX">The base mip level for the negative x target</param>
            <param name="facePosY">The base mip level for the positive y target</param>
            <param name="faceNegY">The base mip level for the negative y target</param>
            <param name="facePosZ">The base mip level for the positive z target</param>
            <param name="faceNegZ">The base mip level for the negative z target</param>
        </member>
        <member name="T:SFGraphics.GLObjects.VertexArrays.VertexArrayObject">
            <summary>
            Encapsulates an OpenGL vertex array object. 
            Vertex array objects cannot be shared between contexts.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.VertexArrays.VertexArrayObject.#ctor">
            <summary>
            Creates an empty vertex array object.
            The vertex array object must first be bound with <see cref="M:SFGraphics.GLObjects.VertexArrays.VertexArrayObject.Bind"/>.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.VertexArrays.VertexArrayObject.Bind">
            <summary>
            Binds the vertex array <see cref="F:SFGraphics.GLObjects.GLObject.Id"/>
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.VertexArrays.VertexArrayObject.Unbind">
            <summary>
            Binds the default vertex array value of <c>0</c>.
            </summary>
        </member>
        <member name="T:SFGraphics.GlUtils.OpenGLExtensions">
            <summary>
            This class contains methods for checking the availability of OpenGL extensions.
            Extensions that aren't core for the current OpenGL version may not be available on all graphics processors.
            For example, an application can target OpenGL 3.30 but still use newer features if available.
            </summary>
        </member>
        <member name="M:SFGraphics.GlUtils.OpenGLExtensions.IsAvailable(System.String)">
            <summary>
            Returns true if an extension is available. 
            There is no need to check core extensions for the current OpenGL version.
            Initializes the list of current extensions again if empty.
            </summary>
            <param name="extensionName">The name of the OpenGL extension. 
            Ex: GL_KHR_debug. Names are not case sensitive. </param>
            <returns>True if the extension is available</returns>
        </member>
        <member name="M:SFGraphics.GlUtils.OpenGLExtensions.InitializeCurrentExtensions">
            <summary>
            Clears and initializes the available extensions for searching with <see cref="M:SFGraphics.GlUtils.OpenGLExtensions.IsAvailable(System.String)"/>.
            </summary>
        </member>
    </members>
</doc>
